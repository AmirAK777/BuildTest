{"version":3,"file":"auth-features.mjs","sources":["../../../projects/auth-features/src/lib/services/localstorage.authentication.infrastructure.ts","../../../projects/auth-features/src/lib/services/authentication.infrastructure.ts","../../../projects/auth-features/src/lib/services/reset.service.ts","../../../projects/auth-features/src/lib/services/toaster.service.ts","../../../projects/auth-features/src/lib/store/index.ts","../../../projects/auth-features/src/lib/services/authentication.application.ts","../../../projects/auth-features/src/lib/guards/authenticate.guard.ts","../../../projects/auth-features/src/lib/components/login-with-form/login-with-form.component.ts","../../../projects/auth-features/src/lib/components/login-with-form/login-with-form.component.html","../../../projects/auth-features/src/lib/pages/login/login.component.ts","../../../projects/auth-features/src/lib/pages/login/login.component.html","../../../projects/auth-features/src/lib/authenication.routes.ts","../../../projects/auth-features/src/lib/interceptors/jwt.interceptor.ts","../../../projects/auth-features/src/lib/pages/register/questions-form/inscription-form/inscription-form.component.ts","../../../projects/auth-features/src/lib/pages/register/questions-form/inscription-form/inscription-form.component.html","../../../projects/auth-features/src/lib/services/jwt-decoder.service.ts","../../../projects/auth-features/src/public-api.ts","../../../projects/auth-features/src/auth-features.ts"],"sourcesContent":["import { inject, Injectable } from '@angular/core';\r\nimport { Storage } from '@ionic/storage-angular';\r\n\r\nexport type WithToken = {\r\n  access_token: string | null;\r\n  refresh_token: string | null;\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LocalStorageAuthenticationInfrastructure {\r\n  private _storageInitialised = false;\r\n\r\n  private _storage = inject(Storage);\r\n\r\n  async startSession(user: WithToken) {\r\n    if (!this._storageInitialised) await this._storage.create();\r\n    if (user.access_token && user.refresh_token) {\r\n      this._storage?.set('access_token', user.access_token);\r\n      this._storage?.set('refresh_token', user.refresh_token);\r\n    }\r\n  }\r\n\r\n  async getSession(): Promise<WithToken> {\r\n    if (!this._storageInitialised) await this._storage.create();\r\n    return {\r\n      access_token: await this._storage?.get('access_token'),\r\n      refresh_token: await this._storage?.get('refresh_token'),\r\n    };\r\n  }\r\n\r\n  async get(key: string): Promise<string> {\r\n    if (!this._storageInitialised) await this._storage.create();\r\n\r\n    const value: string = await this._storage.get(key);\r\n    return value;\r\n  }\r\n\r\n  async set(key: string, value: any): Promise<void> {\r\n    if (!this._storageInitialised) await this._storage.create();\r\n\r\n    return this._storage.set(key, value);\r\n  }\r\n\r\n  async remove(key: string): Promise<void> {\r\n    if (!this._storageInitialised) await this._storage.create();\r\n\r\n    return this._storage.remove(key);\r\n  }\r\n\r\n  async endSession(): Promise<void> {\r\n    await this._storage.clear();\r\n  }\r\n}\r\n","import { Injectable, inject } from '@angular/core';\r\nimport { from, Observable, shareReplay, switchMap } from 'rxjs';\r\nimport { AuthenticationToken } from '../models/authentication-user';\r\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Storage } from '@ionic/storage-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthenticationInfrastructure {\r\n  private readonly apiKeyCloakUrl = 'http://192.168.1.38:8080';\r\n\r\n  private readonly _httpClient = inject(HttpClient);\r\n  private readonly storage = inject(Storage);\r\n\r\n  login(email: string, password: string): Observable<AuthenticationToken> {\r\n    const body = new HttpParams()\r\n      .set('grant_type', 'password')\r\n      .set('client_id', 'clovis-public-client')\r\n      .set('scope', 'email openid')\r\n      .set('username', email)\r\n      .set('password', password);\r\n\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n    });\r\n    return this._httpClient\r\n      .post<AuthenticationToken>(\r\n        `${this.apiKeyCloakUrl}/realms/clovis/protocol/openid-connect/token/`,\r\n        body.toString(),\r\n        { headers },\r\n      )\r\n      .pipe(shareReplay(1));\r\n  }\r\n\r\n  refreshToken() {\r\n    return from(this.storage.get('refresh_token')).pipe(\r\n      switchMap(storedRefreshToken => {\r\n        const body = new HttpParams()\r\n          .set('grant_type', 'refresh_token')\r\n          .set('client_id', 'clovis-public-client')\r\n          .set('refresh_token', storedRefreshToken);\r\n\r\n        const headers = new HttpHeaders().set(\r\n          'Content-Type',\r\n          'application/x-www-form-urlencoded',\r\n        );\r\n\r\n        return this._httpClient\r\n          .post<AuthenticationToken>(\r\n            `${this.apiKeyCloakUrl}/realms/clovis/protocol/openid-connect/token/`,\r\n            body,\r\n            { headers },\r\n          )\r\n          .pipe(shareReplay(1));\r\n      }),\r\n    );\r\n  }\r\n}\r\n","// password-reset.service.ts\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, of } from 'rxjs';\r\nimport { delay } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PasswordResetService {\r\n  private resetCodeSubject = new BehaviorSubject<string | null>(null);\r\n  resetCode$ = this.resetCodeSubject.asObservable();\r\n\r\n  // Méthode pour simuler l'envoi d'un email avec le code de réinitialisation\r\n  sendResetCode(email: string): Observable<string> {\r\n    const generatedCode = this.generateResetCode();\r\n    console.log(`Sending reset code ${generatedCode} to ${email}`); // Simule l'envoi de l'email\r\n    this.resetCodeSubject.next(generatedCode);\r\n    \r\n    // Retourne un Observable avec un délai simulé pour l'envoi de l'email\r\n    return of(`Reset code sent to ${email}: ${generatedCode}`).pipe(delay(1000)); // Simule un délai d'1 seconde\r\n  }\r\n\r\n  // Générer un code de réinitialisation aléatoire (simple exemple)\r\n  private generateResetCode(): string {\r\n    return Math.floor(100000 + Math.random() * 900000).toString();\r\n  }\r\n\r\n  // Vérifier si le code entré est correct\r\n  verifyResetCode(codeEntered: string): Observable<string> {\r\n    const validCode = this.resetCodeSubject.value;\r\n    if (validCode && codeEntered === validCode) {\r\n      console.log('Reset code is valid');\r\n      return of('Reset code is valid').pipe(delay(500));  // Retourne un Observable avec un message\r\n    } else {\r\n      console.log('Invalid reset code');\r\n      return of('Invalid reset code. Please try again.').pipe(delay(500)); // Retourne un message d'erreur\r\n    }\r\n  }\r\n\r\n  // Mettre à jour le mot de passe si le code est valide\r\n  updatePassword(newPassword: string): Observable<string> {\r\n    const validCode = this.resetCodeSubject.value;\r\n    if (validCode) {\r\n      console.log(`Password updated to: ${newPassword}`);\r\n      this.resetCodeSubject.next(null);  // Reset le code après utilisation\r\n      return of('Password updated successfully').pipe(delay(500)); // Retourne un message de succès\r\n    } else {\r\n      console.log('No valid reset code found');\r\n      return of('Failed to update password. Invalid reset code.').pipe(delay(500)); // Message d'erreur\r\n    }\r\n  }\r\n}\r\n","import { inject, Injectable } from '@angular/core';\r\nimport { ToastController } from '@ionic/angular/standalone';\r\nimport { addIcons } from 'ionicons';\r\nimport { checkmarkCircleOutline, alertCircleOutline} from 'ionicons/icons';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ToasterService {\r\n  private _toastController = inject(ToastController);\r\n  constructor() {\r\n    addIcons({ checkmarkCircleOutline, alertCircleOutline });\r\n  }\r\n\r\n  async presentToastWithOptions(message: string, icon: string, color: string) {\r\n    const toast = await this._toastController.create({\r\n      message: message,\r\n      duration: 2500,\r\n      position: 'bottom',\r\n      icon: icon,\r\n      color: color,\r\n    });\r\n\r\n    await toast.present();\r\n  }\r\n\r\n  success(message: string) {\r\n    this.presentToastWithOptions(message, checkmarkCircleOutline, 'primary');\r\n  }\r\n\r\n  warning(message: string) {\r\n    this.presentToastWithOptions(message, alertCircleOutline, 'warning');\r\n  }\r\n\r\n  error(message: string) {\r\n    this.presentToastWithOptions(message, alertCircleOutline, 'danger');\r\n  }\r\n}\r\n\r\n\r\n","import { computed, effect, inject } from '@angular/core';\r\nimport {\r\n  getState,\r\n  patchState,\r\n  signalStore,\r\n  withComputed,\r\n  withHooks,\r\n  withMethods,\r\n  withState,\r\n} from '@ngrx/signals';\r\nimport { rxMethod } from '@ngrx/signals/rxjs-interop';\r\nimport { pipe, tap, concatMap, map } from 'rxjs';\r\nimport { tapResponse } from '@ngrx/operators';\r\nimport {\r\n  LocalStorageAuthenticationInfrastructure,\r\n  WithToken,\r\n} from '../services/localstorage.authentication.infrastructure';\r\nimport { AuthenticationToken } from '../models/authentication-user';\r\nimport { AuthenticationInfrastructure } from '../services/authentication.infrastructure';\r\nimport { NavController } from '@ionic/angular/standalone';\r\nimport { PasswordResetService } from '../services/reset.service';\r\nimport { ToasterService } from '../services/toaster.service';\r\n\r\nexport interface AuthenticationState {\r\n  token: AuthenticationToken | undefined | null;\r\n  isLoading: boolean;\r\n  isAuthenticated: boolean;\r\n  steps: number;\r\n}\r\n\r\nexport type AuthenticateType = {\r\n  login: string;\r\n  password: string;\r\n};\r\n\r\nconst initialValue: AuthenticationState = {\r\n  token: null,\r\n  isLoading: false,\r\n  isAuthenticated: false,\r\n  steps: 1,\r\n};\r\n\r\nexport const AuthenticationStore = signalStore(\r\n  { providedIn: 'root' },\r\n  withState(initialValue),\r\n  withComputed((store) => ({\r\n    isLogged: computed(() => store.isAuthenticated()),\r\n    isNotLogged: computed(() => !store.token() || !store.isAuthenticated()),\r\n  })),\r\n  withMethods(\r\n    (\r\n      store,\r\n      infra = inject(AuthenticationInfrastructure),\r\n      forgotPassService = inject(PasswordResetService),\r\n      localInfra = inject(LocalStorageAuthenticationInfrastructure),\r\n      navController = inject(NavController),\r\n      toasterService = inject(ToasterService)\r\n    ) => ({\r\n      localLogin(token: WithToken): void {\r\n        if (token.access_token && token.refresh_token) {\r\n          patchState(store, {\r\n            isAuthenticated: true,\r\n            token: {\r\n              access_token: token.access_token,\r\n              expires_in: 0,\r\n              refresh_expires_in: 0,\r\n              refresh_token: token.refresh_token,\r\n            },\r\n          });\r\n        }\r\n      },\r\n      logIn: rxMethod<AuthenticateType>(\r\n        pipe(\r\n          tap(() => patchState(store, { isLoading: true })),\r\n          concatMap((input) => {\r\n            return infra.login(input.login, input.password).pipe(\r\n              map((tokenResponse) => {\r\n                return {\r\n                  access_token: tokenResponse.access_token,\r\n                  expires_in: tokenResponse.expires_in,\r\n                  refresh_expires_in: tokenResponse.refresh_expires_in,\r\n                  refresh_token: tokenResponse.refresh_token,\r\n                } as AuthenticationToken;\r\n              }),\r\n              tap((token) =>\r\n                localInfra.startSession({\r\n                  access_token: token.access_token,\r\n                  refresh_token: token.refresh_token,\r\n                })\r\n              ),\r\n              tapResponse({\r\n                next: (token) => {\r\n                  patchState(store, {\r\n                    isLoading: false,\r\n                    isAuthenticated: true,\r\n                    token,\r\n                  });\r\n                  toasterService.success(\r\n                    'Bienvenue sur votre espace personnel.'\r\n                  );\r\n                },\r\n                error: () => {\r\n                  patchState(store, { isLoading: false });\r\n                  toasterService.error(\r\n                    \"Échec de l'authentification. Veuillez vérifier vos identifiants.\"\r\n                  );\r\n                },\r\n              })\r\n            );\r\n          })\r\n        )\r\n      ),\r\n      sendResetCode: rxMethod<string>(\r\n        pipe(\r\n          tap(() => patchState(store, { isLoading: true })),\r\n          concatMap((input) => {\r\n            return forgotPassService.sendResetCode(input).pipe(\r\n              tapResponse({\r\n                next: (message) => {\r\n                  patchState(store, {\r\n                    isLoading: false,\r\n                    steps: 2,\r\n                  });\r\n                },\r\n                error: () => {\r\n                  patchState(store, { isLoading: false, steps: 2 });\r\n                },\r\n              })\r\n            );\r\n          })\r\n        )\r\n      ),\r\n      verifyResetCode: rxMethod<string>(\r\n        pipe(\r\n          tap(() => patchState(store, { isLoading: true })),\r\n          concatMap((input) => {\r\n            return forgotPassService.verifyResetCode(input).pipe(\r\n              tapResponse({\r\n                next: (message) => {\r\n                  patchState(store, {\r\n                    isLoading: false,\r\n                    steps: 3,\r\n                  });\r\n                },\r\n                error: () => {\r\n                  patchState(store, { isLoading: false });\r\n                },\r\n              })\r\n            );\r\n          })\r\n        )\r\n      ),\r\n      updatePassword: rxMethod<string>(\r\n        pipe(\r\n          tap(() => patchState(store, { isLoading: true })),\r\n          concatMap((input) => {\r\n            return forgotPassService.updatePassword(input).pipe(\r\n              tapResponse({\r\n                next: (message) => {\r\n                  patchState(store, {\r\n                    isLoading: false,\r\n                    steps: 3,\r\n                  });\r\n                },\r\n                error: () => {\r\n                  patchState(store, { isLoading: false });\r\n                },\r\n              })\r\n            );\r\n          })\r\n        )\r\n      ),\r\n      logout: async () => {\r\n        patchState(store, {\r\n          token: null,\r\n          isLoading: false,\r\n          isAuthenticated: false,\r\n        });\r\n        localInfra.endSession().then(() => {\r\n          navController.navigateRoot('authenticate/login', {\r\n            animated: false,\r\n          });\r\n        });\r\n      },\r\n    })\r\n  ),\r\n  withHooks({\r\n    onInit(\r\n      store,\r\n      localInfra = inject(LocalStorageAuthenticationInfrastructure)\r\n    ) {\r\n      effect(() => {\r\n        const state = getState(store);\r\n        console.info('counter state: ', state);\r\n      });\r\n      localInfra.getSession().then((token: WithToken) => {\r\n        if (token) {\r\n          store.localLogin(token);\r\n        }\r\n      });\r\n    },\r\n  })\r\n);\r\n","import { effect, inject, Injectable, Signal } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { AuthenticationToken } from '../models/authentication-user';\r\nimport { AuthenticationStore } from '../store';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthenticationApplication {\r\n  private readonly store = inject(AuthenticationStore);\r\n  private readonly router = inject(Router);\r\n\r\n\r\n\r\n  login(login: string, password: string) {\r\n    this.store.logIn({ login, password });\r\n  }\r\n\r\n  logout(): void {\r\n    this.store.logout();\r\n  }\r\n\r\n  get isLoading(): Signal<boolean> {\r\n    return this.store.isLoading;\r\n  }\r\n\r\n  get isAuthenticated(): Signal<boolean> {\r\n    return this.store.isLogged;\r\n  }\r\n\r\n  get token(): Signal<AuthenticationToken | null | undefined> {\r\n    return this.store.token;\r\n  }\r\n}\r\n","import { CanActivateFn, Router } from '@angular/router';\r\nimport { AuthenticationApplication } from '../services/authentication.application';\r\nimport { inject } from '@angular/core';\r\n\r\nexport const userisAuthenticated: CanActivateFn = (\r\n  route,\r\n  state,\r\n  application = inject(AuthenticationApplication),\r\n  router = inject(Router),\r\n) => {\r\n\r\n  if (!application.isAuthenticated()) {\r\n    router.navigate(['authenticate/login']);\r\n  }\r\n  return application.isAuthenticated();\r\n\r\n};\r\n","import { Component, inject } from '@angular/core';\r\nimport { AuthenticationApplication } from '../../services/authentication.application';\r\nimport {\r\n  FormBuilder,\r\n  FormControl,\r\n  ReactiveFormsModule,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { RouterLink } from '@angular/router';\r\nimport {\r\n  IonButton,\r\n  IonInput,\r\n  IonItem,\r\n  IonList,\r\n  IonText,\r\n} from '@ionic/angular/standalone';\r\n\r\n@Component({\r\n  selector: 'clovis-login-with-form',\r\n  standalone: true,\r\n  imports: [\r\n    IonText,\r\n    ReactiveFormsModule,\r\n    RouterLink,\r\n    IonList,\r\n    IonItem,\r\n    IonInput,\r\n    IonButton,\r\n  ],\r\n  templateUrl: './login-with-form.component.html',\r\n  styleUrl: './login-with-form.component.scss',\r\n})\r\nexport class LoginWithFormComponent {\r\n  private readonly application = inject(AuthenticationApplication);\r\n\r\n  loginForm = inject(FormBuilder).group({\r\n    email: new FormControl('', [Validators.required, Validators.email]),\r\n    password: new FormControl('', Validators.required),\r\n  });\r\n\r\n  save(): void {\r\n    if (this.loginForm.value.email && this.loginForm.value.password)\r\n      this.application.login(\r\n        this.loginForm.value.email,\r\n        this.loginForm.value.password\r\n      );\r\n  }\r\n\r\n  get email(): FormControl {\r\n    return this.loginForm.controls.email;\r\n  }\r\n  get password(): FormControl {\r\n    return this.loginForm.controls.password;\r\n  }\r\n\r\n  get isValid(): boolean {\r\n    return this.loginForm.valid;\r\n  }\r\n}\r\n","<form [formGroup]=\"loginForm\" (submit)=\"save()\">\r\n  <ion-list>\r\n    <ion-item>\r\n      <ion-input\r\n        fill=\"solid\"\r\n        label=\"Email\"\r\n        [formControl]=\"email\"\r\n        labelPlacement=\"floating\"\r\n      ></ion-input>\r\n    </ion-item>\r\n    <ion-item>\r\n      <ion-input\r\n        fill=\"solid\"\r\n        label=\"Mot de passe\"\r\n        [formControl]=\"password\"\r\n        labelPlacement=\"floating\"\r\n        type=\"password\"\r\n      ></ion-input>\r\n    </ion-item>\r\n    <div class=\"ion-text-center ion-margin-top\">\r\n      <a routerLink=\"/authenticate/forgot-password\">mot de passe oublié</a>\r\n    </div>\r\n  </ion-list>\r\n\r\n  <ion-button class=\"clovis\" type=\"submit\" [disabled]=\"!isValid\" expand=\"block\"\r\n    >Valider</ion-button\r\n  >\r\n</form>\r\n","import { Component } from '@angular/core';\r\nimport { LoginWithFormComponent } from '../../components/login-with-form/login-with-form.component';\r\nimport {\r\n  IonContent,\r\n  IonText,\r\n  IonRow,\r\n  IonToolbar,\r\n  IonBackButton,\r\n  IonHeader,\r\n  IonThumbnail,\r\n} from '@ionic/angular/standalone';\r\n\r\n@Component({\r\n  selector: 'clovis-login',\r\n  standalone: true,\r\n  imports: [\r\n    IonHeader,\r\n    IonBackButton,\r\n    IonToolbar,\r\n    IonRow,\r\n    IonText,\r\n    IonContent,\r\n    LoginWithFormComponent,\r\n    IonThumbnail\r\n  ],\r\n  templateUrl: './login.component.html',\r\n  styleUrl: './login.component.scss',\r\n})\r\nexport class LoginComponent {}\r\n","<ion-header collapse=\"fade\">\r\n  <ion-toolbar>\r\n    <ion-row\r\n      class=\"ion-justify-content-center ion-align-items-center ion-text-center\"\r\n    >\r\n      <ion-thumbnail>\r\n        <img\r\n          alt=\"Enveloppe\"\r\n          src=\"https://res.cloudinary.com/dyewhr2lj/image/upload/v1668516112/Logo_Clovis_fxqyoh.png\"\r\n        />\r\n      </ion-thumbnail>\r\n      <p>clovis</p>\r\n    </ion-row>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content class=\"ion-padding\">\r\n  <ion-text class=\"ion-text-center ion-margin\">\r\n    <h3>Bienvenue chez Clovis !</h3>\r\n    <p>Saisissez vos identifiants pour accéder à votre espace</p>\r\n  </ion-text>\r\n\r\n  <clovis-login-with-form></clovis-login-with-form>\r\n</ion-content>\r\n","import { Routes } from '@angular/router';\r\nimport { LoginComponent } from './pages/login/login.component';\r\n\r\nexport const authenticationRoutes: Routes = [\r\n  {\r\n    path: 'login',\r\n    component: LoginComponent,\r\n  },\r\n  {\r\n    path: 'forgot-password',\r\n    loadComponent: () =>\r\n      import('../lib/pages/forgot-password/forgot-password.component').then(\r\n        (m) => m.ForgotPasswordComponent\r\n      ),\r\n  },\r\n  { path: '**', redirectTo: '/login' },\r\n];\r\n","import {\r\n  HttpErrorResponse,\r\n  HttpHandlerFn,\r\n  HttpInterceptorFn,\r\n  HttpRequest\r\n} from '@angular/common/http';\r\nimport { inject } from '@angular/core';\r\nimport { Storage } from '@ionic/storage-angular';\r\nimport { catchError, from, switchMap, throwError } from 'rxjs';\r\nimport { AuthenticationApplication } from '../services/authentication.application';\r\nimport { AuthenticationInfrastructure } from '../services/authentication.infrastructure';\r\nimport {\r\n  LocalStorageAuthenticationInfrastructure,\r\n  WithToken,\r\n} from '../services/localstorage.authentication.infrastructure';\r\n\r\nexport function jwtInterceptor(request: HttpRequest<any>, next: HttpHandlerFn) {\r\n  const storage = inject(Storage);\r\n\r\n  return from(storage.get('access_token')).pipe(\r\n    switchMap((token) => {\r\n      const newRequest = request.clone({\r\n        setHeaders: {\r\n          Authorization: 'Bearer ' + token,\r\n        },\r\n      });\r\n      return next(newRequest);\r\n    })\r\n  );\r\n}\r\n\r\nexport const refreshInterceptor: HttpInterceptorFn = (req, next) => {\r\n  const authInfra = inject(AuthenticationInfrastructure);\r\n  const localStorage = inject(LocalStorageAuthenticationInfrastructure);\r\n  const authApp = inject(AuthenticationApplication);\r\n\r\n  return next(req).pipe(\r\n    catchError((error: HttpErrorResponse) => {\r\n      if (error.status === 401 || error.status === 0) {\r\n        return authInfra.refreshToken().pipe(\r\n          switchMap((tokenResponse: WithToken) => {\r\n            localStorage.startSession({\r\n              access_token: tokenResponse.access_token,\r\n              refresh_token: tokenResponse.refresh_token,\r\n            });\r\n            const newAuthReq = req.clone({\r\n              headers: req.headers.set(\r\n                'Authorization',\r\n                `Bearer ${tokenResponse.access_token}`\r\n              ),\r\n            });\r\n            console.error('Error refreshing token update');\r\n\r\n            return next(newAuthReq);\r\n          }),\r\n          catchError((refreshError) => {\r\n            console.error('Un erreur est survenu', refreshError);\r\n            authApp.logout();\r\n            return throwError(() => new Error('Token refresh failed!'));\r\n          })\r\n        );\r\n      } else {\r\n        return throwError(() => error);\r\n      }\r\n    })\r\n  );\r\n};\r\n\r\n","import { Component, inject, output } from '@angular/core';\r\nimport { FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { Customer } from 'models-lib';\r\n\r\n@Component({\r\n  selector: 'clovis-inscription-form',\r\n  standalone: true,\r\n  imports: [ReactiveFormsModule],\r\n  templateUrl: './inscription-form.component.html',\r\n  styleUrl: './inscription-form.component.css'\r\n})\r\nexport class InscriptionFormComponent {\r\n\r\n\r\n  registerForm = inject(FormBuilder).group({\r\n    firstName: [null, [Validators.required]],\r\n    lastName: [null, [Validators.required]],\r\n    email: ['', [Validators.required]],\r\n    phoneNumber: ['', [Validators.required]],\r\n    zipCode: ['', [Validators.required]],\r\n    rgpdChecked: [false, Validators.requiredTrue]\r\n  });\r\n\r\n  requestToSave = output<Customer>();\r\n\r\n\r\n  saveToParent(): void {\r\n    const customer: Customer = this.registerForm.value as unknown as Customer;\r\n    this.requestToSave.emit(customer);\r\n    console.info(customer)\r\n  }\r\n}\r\n","<div class=\"form-container\">\r\n    <form class=\"form-register\" [formGroup]=\"registerForm\" (ngSubmit)=\"saveToParent()\">\r\n        <div class=\"form-item\">\r\n            <input type=\"text\" id=\"firstName\" name=\"firstName\" formControlName=\"firstName\" required>\r\n            <label for=\"firstName\">Username</label>\r\n        </div>\r\n        <div class=\"form-item\">\r\n            <input name=\"lastName\" id=\"lastName\" formControlName=\"lastName\" required>\r\n            <label for=\"lastName\">Last Name</label>\r\n        </div>\r\n        <div class=\"form-item\">\r\n            <input name=\"email\" id=\"email\" formControlName=\"email\" required>\r\n            <label for=\"email\">Email</label>\r\n        </div>\r\n        <div class=\"form-item\">\r\n            <input name=\"phoneNumber\" id=\"phoneNumber\" formControlName=\"phoneNumber\" required>\r\n            <label for=\"phoneNumber\">Phone Number</label>\r\n        </div>\r\n        <div class=\"form-item\">\r\n            <input name=\"zipCode\" id=\"zipCode\" formControlName=\"zipCode\" required>\r\n            <label for=\"zipCode\">Zip Code</label>\r\n        </div>\r\n        <div class=\"form-check\">\r\n            <input class=\"checkbox\" type=\"checkbox\" formControlName=\"rgpdChecked\">\r\n            <label for=\"acceptTerms\" class=\"form-check-label\">J’accepte que CARE SAS collecte mes données personnelles\r\n                aux fins\r\n                de pouvoir me contacter (par email et téléphone) pour m’aider à\r\n                optimiser ma situation fiscale et financière.</label>\r\n        </div>\r\n        <div class=\"images-trust\">\r\n            <img src=\"https://res.cloudinary.com/dyewhr2lj/image/upload/v1615905954/Signature%20Email/trust_credential_bldu39.png\"\r\n                alt=\"TRUST\">\r\n        </div>\r\n        <div class=\"images-rgpd\">\r\n            <img src=\"https://res.cloudinary.com/dyewhr2lj/image/upload/v1720877304/Ic%C3%B4nes%20et%20illustrations/icons%20survey/CNIL.jpg\"\r\n                alt=\"CNIL\">\r\n            <img src=\"https://res.cloudinary.com/dyewhr2lj/image/upload/v1720877304/Ic%C3%B4nes%20et%20illustrations/icons%20survey/RGPD.png\"\r\n                alt=\"RGPD\">\r\n        </div>\r\n        <div class=\"terms\">\r\n            <p>Nous respectons la confidentialité et la sécurité de vos données</p>\r\n            <p>En cliquant sur « Accéder à mon résultat », je reconnais avoir pris connaissance et accepté les\r\n                conditions générales.\r\n                Les données personnelles communiquées sont uniquement utilisées pour permettre l’utilisation des\r\n                services Clovis.\r\n                Pour plus d’informations, consultez notre charte de confidentialité.</p>\r\n        </div>\r\n        <div class=\"button\">\r\n            <button class=\"clovis-big-blue-button\" type=\"submit\" [disabled]=\"!registerForm.valid\">Submit</button>\r\n        </div>\r\n    </form>\r\n\r\n</div>","import { inject, Injectable } from '@angular/core';\r\nimport { LocalStorageAuthenticationInfrastructure } from './localstorage.authentication.infrastructure';\r\nimport { jwtDecode } from 'jwt-decode';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class JwtDecoderService {\r\n  storage = inject(LocalStorageAuthenticationInfrastructure);\r\n\r\n  async decodeToken(): Promise<string[] | null> {\r\n    const token = await this.storage.get('access_token');\r\n    const decodedToken: any = jwtDecode(token);\r\n    const roles = decodedToken.realm_access?.roles || null;\r\n    return roles;\r\n  }\r\n}\r\n","/*\r\n * Public API Surface of auth-features\r\n */\r\n\r\nexport * from './lib/services/authentication.application';\r\nexport * from './lib/guards/authenticate.guard';\r\nexport * from './lib/authenication.routes';\r\nexport * from './lib/interceptors/jwt.interceptor';\r\nexport * from './lib/pages/register/questions-form/inscription-form/inscription-form.component';\r\nexport * from './lib/services/jwt-decoder.service';\r\nexport * from './lib/store/index';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}